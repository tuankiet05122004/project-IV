@use "sass:math";

// Breakpoints, dimension, container, row, column, v.v
$grid-breakpoints: (
    xs: 0,
    sm: 576px,
    md: 768px,
    lg: 992px,
    xl: 1200px,
    xxl: 1400px,
);
$container-max-widths: (
    sm: 540px,
    md: 720px,
    lg: 960px,
    xl: 1140px,
    xxl: 1320px,
);

$gutters: (
    0: 0,
    1: 0.25,
    2: 0.5,
    3: 1,
    4: 1.5,
    5: 3,
);

$grid-columns: 12;
$grid-gutter-width: 30px;

%gutter-padding {
    padding-left: calc(var(--gutter-x) * 0.5);
    padding-right: calc(var(--gutter-x) * 0.5);
}

.container-fluid {
    --gutter-x: #{$grid-gutter-width};
    --gutter-y: 0;
    width: 100%;
    margin-left: auto;
    margin-right: auto;
    @extend %gutter-padding;
}

.container {
    @extend .container-fluid;
}

.row {
    display: flex;
    flex-wrap: wrap;
    margin-left: calc(var(--gutter-) * 0.5 * -1);
    margin-right: calc(var(--gutter-x) * 0.5 * -1);
    &[class*="row-cols-"] > *,
    [class*="col-"] {
        flex: 0 0 auto;
        @extend %gutter-padding;
    }
}

.col {
    flex: 1 0;
    @extend %gutter-padding;
}

@mixin make-media-query($dimension, $bypass: false) {
    @if $bypass {
        @content;
    } @else {
        @media (min-width: $dimension) {
            @content;
        }
    }
}

@mixin make-row-columns($infix) {
    @for $i from 1 through $grid-columns * 0.5 {
        .row-cols#{$infix}-#{$i} > * {
            width: math.div(100%, $i);
        }
    }
}

@mixin make-columns($infix) {
    @for $i from 1 through $grid-columns {
        .col#{$infix}-#{$i} {
            width: math.div(100%, $grid-columns) * $i;
        }
    }
}

@mixin make-offsets($infix) {
    @for $i from 0 to $grid-columns {
        .offset#{$infix}-#{$i} {
            margin-left: if($i > 0, math.div(100%, $grid-columns) * $i, 0);
        }
    }
}

@mixin make-gutter($infix) {
    @each $i, $ratio in $gutters {
        .g#{$infix}-#{$i},
        .gx#{$infix}-#{$i} {
            --gutter-x: #{$grid-gutter-width * $ratio};
        }

        .g#{$infix}-#{$i},
        .gy#{$infix}-#{$i} {
            --gutter-y: #{$grid-gutter-width * $ratio};
        }
    }
}

@each $breakpoint, $dimension in $grid-breakpoints {
    $max-width: map-get($container-max-widths, $breakpoint);
    $infix: if($breakpoint == xs, "", "-#{$breakpoint}");

    @include make-media-query($dimension, $breakpoint == xs) {
        .container {
            max-width: $max-width;
        }

        @include make-row-columns($infix);
        @include make-columns($infix);
        @include make-offsets($infix);
        @include make-gutter($infix);
    }
}
